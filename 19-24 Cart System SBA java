//Cart system SBA for Core programming Java, tested in HackerRank TekSystem
//Scored 19/24 unit test passed

//AppSystem
public class AppSystem extends TheSystem {
    AppSystem() {}
    
  
    @Override
    public void display() {

        
    HashMap<String, Item> itemCollection = this.getItemCollection();
    System.out.print("AppSystem Inventory:\n");
    for (String key: itemCollection.keySet()) {
    	
        System.out.printf(
                "%-20s %-20s %-10s %-10s\n", 
                itemCollection.get(key).getItemName(), 
                itemCollection.get(key).getItemDesc(),
                String.format("%.2f", itemCollection.get(key).getItemPrice()),
                itemCollection.get(key).getAvailableQuantity()
                );
    }}

    @Override      
    public Boolean add(Item item) {
        if(item == null) {
        	return false;
        }
      
        if (itemCollection.containsValue(item)) {
			System.out.print(item.getItemName() + " is already in the App System");
			return false;
		}
      
	    itemCollection.put(item.getItemName(),item);
		return true;
    }
    
    public Item reduceAvailableQuantity(String item_name) {
        Item item = itemCollection.get(item_name);
        
        if (item != null) {
          item.setAvailableQuantity(item.getAvailableQuantity() - 1);
            return item;
        }else{
            return null;
        }
        
        
  	
  	}


    
}

//TheSystem
package com.example;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Scanner;

public abstract class TheSystem {
	HashMap<String, Item> itemCollection;

	public TheSystem() {
      itemCollection = new HashMap<String, Item>();
      
		if (getClass().getSimpleName().equals("AppSystem"))
        { 
			File xx = new File("resources//sample.txt");
            Scanner userInput = new Scanner(System.in);
          	try
            {
          		userInput = new Scanner(xx);
          		itemCollection.clear();
              	while (userInput.hasNextLine())
                {
              		//line = xx.nextLine().trim();
					String[] itemInfo = userInput.nextLine().split("\s");
					Item it = new Item();
					 it.setItemDesc(itemInfo[1]);
		            it.setItemName(itemInfo[0]);
		           itemCollection.put(it.getItemName(), it);
		            it.setAvailableQuantity(Integer.valueOf(itemInfo[3]));
		            it.setItemPrice(Double.valueOf(itemInfo[2]));
                }
                userInput.close();
              }
          	catch(Exception e){
                System.out.print("Error, not found");
                e.printStackTrace();
            }}
          }

	
	public HashMap<String, Item> getItemCollection() {
		return itemCollection;
	}


	public void setItemCollection(HashMap<String, Item> itemCollection) {
		this.itemCollection = itemCollection;
	}


	public Boolean checkAvailability(Item item) {
		if (item.getAvailableQuantity()<= item.getQuantity()) {
			System.out.println("System is unable to add " + item.getItemName() + " to the card. System only has "
					+ item.getAvailableQuantity() + " " + item.getItemName() + "s.");
			return false;
		} else {
			return true;
		}

	}

	public Boolean add(Item item) {
		if (item == null) {
			return false;
		} else if (itemCollection.containsValue(item)) {
			item.setQuantity(item.getQuantity() + 1);
			return true;
		} else if (item != null) {
			itemCollection.put(item.getItemName(), item);
			return true;
		} else
			return false;
	}

	public Item remove(String itemName) {
	
		 if(itemCollection.containsKey(itemName)) {
	return itemCollection.remove(itemName);			
			}else
              return null;
	
	}
	public abstract void display();
}



//MainEntryPoint
package com.example;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

public class MainEntryPoint {
	public static Scanner reader = new Scanner(System.in);
	
	public static void main(String[] args) throws IOException {
	
		AppSystem app = new AppSystem();
        CartSystem cart = new CartSystem();
        
		Integer choice = 0;
		while (choice != 7) {
			menu();
			choice = reader.nextInt();
			switch (choice) {
			case 1:
				Item item = new Item();
				reader.nextLine();
				System.out.print("\nEnter the item name:\n");
				item.setItemName(reader.nextLine());
				System.out.print("\nEnter a description for the item:\n");
				item.setItemDesc(reader.nextLine());
				System.out.print("\nEnter the item's price:\n");
				item.setItemPrice(reader.nextDouble());
				System.out.print("\nEnter the quantity available in the System:\n");
				item.setAvailableQuantity(reader.nextInt());
				System.out.println(item.getItemName());
				if (app.add(item)) {
					System.out.println("Item successfully added");
				} else {
					System.out.println("Try Again");
				}
				break;
			case 2:
				app.display();
				System.out.println("Enter the name of the item");
				reader.nextLine();
				String item_name = reader.nextLine();
				Item item1 = app.getItemCollection().get(item_name);
				if(app.checkAvailability(item1))
				if (cart.add(item1)) {
					app.reduceAvailableQuantity(item_name);
					System.out.println("Item successfully added");
				} else {
					System.out.println("Invalid or Unavailable Item, Please Try Again");
				}
				;
				break;
			case 3:
				cart.display();
				break;
			case 4:
				app.display();
				break;
			case 5:
				cart.display();
				System.out.println("Enter the name of the item");
				reader.nextLine();
				item_name = reader.nextLine();
				if (cart.remove(item_name) != null) {
					System.out.println(item_name + " was removed from the cart");
				} else {
					System.out.println("Invalid Item, Please Try Again");
				}
				break;
			case 6:
				app.display();
				System.out.println("Enter the name of the item");
				reader.nextLine();
				item_name = reader.nextLine();
				if (app.remove(item_name) != null) {

					System.out.println(item_name + " was removed from the System");
					if (cart.remove(item_name) != null) {
						System.out.println(item_name + " was also removed from the cart");
					}
				} else {
					System.out.println("Invalid Item, Please Try Again");
				}

				break;
			case 7:
				System.out.println("\nByyyeee!!");
				break;
			}
		}
		reader.close();
	}

	
	public static void menu() {
		System.out.println("Choose an action:");
		System.out.println("1. Add item to System");
		System.out.println("2. Add item to Cart");
		System.out.println("3. Display Cart");
		System.out.println("4. Display System");
		System.out.println("5. Remove item from Cart");
		System.out.println("6. Remove item from System");
		System.out.println("7. Quit");
	}
}


//CartSystem
package com.example;

import java.util.HashMap;

public class CartSystem extends TheSystem {
    CartSystem(){}
    Item item;
    MainEntryPoint mep = new MainEntryPoint();

    @Override
    public void display() {
  
    	HashMap<String, Item> itemCollection = this.getItemCollection();
       System.out.print("Cart:\n");
       System.out.printf("%-20s %-20s %-10s %-10s %-10s\n",
               "Name", "Description", "Price", "Quantity", "Sub Total");
       
       double total = 0;
       
       for(String key: itemCollection.keySet()) {
    	   Item item = getItemCollection().get(key);
    	   double sub_total = item.getItemPrice() * item.getQuantity();
    	  total += sub_total;
       	System.out.printf("%-20s %-20s %-10.2f %-10d %-10.2f\n",
       	item.getItemName(),
       	item.getItemDesc(),
       	item.getItemPrice(),
       	item.getQuantity(),
       	sub_total);
       	 }
 
       System.out.printf("%-20s %-20.2f\n","Pre-tax Total",total);
       System.out.printf("%-20s %-20.2f\n","Tax",total*0.05);
       System.out.printf("%-20s %-20.2f\n","Total",total*1.05);
  
                
       
        
    }

    
  
}

//Item
package com.example;

public class Item{
    private String itemName;
    private String itemDesc;
    private double itemPrice;
    private int availableQuantity;
    private int quantity;
    
    public Item() {
       this.quantity=1;
    }
    
    public Item(String itemName, String itemDesc, Double itemPrice, Integer availableQuantity) {
        this.itemName=itemName;
        this.itemDesc=itemDesc;
        this.itemPrice = itemPrice;
        this.availableQuantity = availableQuantity;
    }
    
    
    public String getItemName() {
        return itemName;
    }

    public void setItemName(String itemName) {
        this.itemName = itemName;
    }

    public String getItemDesc() {
        return itemDesc;
    }

    public void setItemDesc(String itemDesc) {
        this.itemDesc = itemDesc;
    }

    public Double getItemPrice() {
        return itemPrice;
    }

    public void setItemPrice(Double itemPrice) { 
        this.itemPrice = itemPrice;
    }

    public Integer getAvailableQuantity() {
        return availableQuantity;
    }

    public void setAvailableQuantity(Integer availableQuantity) {
        this.availableQuantity = availableQuantity;
    }

    public Integer getQuantity() {
        this.quantity = 1;
        return quantity ;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }
    
    
    
    
}
